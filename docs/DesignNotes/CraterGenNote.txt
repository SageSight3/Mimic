while it would be more realistic to approach it from mass and velocity, there's a whole slew of other complexities that come with that with less certainty in their outcomes. The other issue arises with variability. Each tile on the map is 5km x 5km. If I used a function, all craters of mass and velocity x would be identical, and add an identical amount of material to the map. With the algorithm I intend to implement, I'm able to have some wiggle room, and have more opportunities to introduce greater variance between similar impacts without breaking their plausibility. It also helps me make the numbers more computer friendlly, as on these scales, in reality, billions are small, plus the other added benefit, being I take a problem that involves 3+ variables, and shrink it down to 2

with reducing the number of variables I need

The premise is by approaching it from a predetermined crater size, which will be determined by a randomly generated depth, instead of having to ask what's the mass, velocity, and density, of an impactor, as well  as the density of the tiles in it's blast radius, which could vary more over larger swaths of terrain and be uneven, I can just say, no: the crater is going to be this big and then just ask how much mass, for a given velocity, would it take to create it. 

There is information lost in that, true, as in terms of material volume to redistribute, density matters, but it's less significant than if I were to ask the density question from the other way, since impacters are 99.99999% of the time, are tiny compared to the size of planets, excluding rare ones, like Theia, and there are a metric ton more of them, enabling the ability to use their average densities as a relatively accurate constant for all of them. While treating them uniformly like this, does mean that individual impacters' data may be less accurate in volume of material added to the map, due to missing that crucial data point in their density, over the course of hundreds to thousands, to unironically, if execution time is short enough to reasonably allow, maybe tens of thousands of impacts, the aggregate of added volume should be relatively similar to what could be expected in reality.

So, am able to dump asking for an asteroids density, meaning the only unknown i have to worry about it is mass

i may still put a die role in to determine impacter type between types C, M, and S asteroids, and use their corresponding average densities, but from what I've researched, it'll just be simpler and faster to treat them all as having their average density. The map's default size is 4,000,000 tiles, and if I can get it there, it will be passed over 90,000 times during the generation process, so minimizing those steps, even moreso as implement other feature generators is going to be crucial. 

Honestly, I'm unsure about even having multiple velocity tiers for the same reason, but with it being directly related to impactor energy, which is where impactor mass is being derived from, it's the variable that makes the most sense to me, to add some variance in, vs calculating the energy, finding the mass, and then adding another calculation after that to add vary the added material's volume via differing densities, that for the purpose of my senior project, the effects of which could just be overwritten or expressed as velocity, anyways.

For further context, the expression I'm using to calculate energy is based off observations in the relationship between crater size and impact energy, I researched and learned to be E (in erg) = (C(10E+24)((craterDiameter^2.59), C = 9.1, but can range from ~1-10? idk, the article was a bit jank. Either way, then multiply that by 10E-7 to get the energy in joules, plug it into the kinetic energy formula, throw in a chosen velocity, and it's just algebra to find the mass from there.

(35400(craterRadius^2.59)/(2000*velocityTier) - This expression came from simplifications, conversions of Diameter from km to tiles aka 2(craterTileRadius)(5km), and setting it equal to the kinetic energy formula and solving for mass, at a known velocity. The 35400 though would differ if allowing randomness in C, vs just using 9.1