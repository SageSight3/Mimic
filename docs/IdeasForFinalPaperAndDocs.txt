things learned with rust
ownership and borrowing, 
traits
module structure
undafe code
unstable code
rust's drawbacks
    still in development - unstable features
    sometimes requires overly-constricting organization (mostly in project structure), which can lead to convoluted work arounds
        project structure
        limitations of static variables
GUI issue (no control outside of gui mod)
    immensely restrictive
    seems to be designed in such a way that renders tradisional MVC impossible, and prohibits direct interaction
    to and from the GUI
explicit mutability, defining getters for both mutable and immutable versions of the data
optimization and execution time
role of rng in a procedural map generator
obstacles
	hyperfixtion/workflow
	rust's seeming to be intended structure vs how have been taught vs my own understanding/take
refactoring to rust?
refactoring of GUI and map_processor to not need to use GUI_OBSERVER
rust return statements
    statements vs expressions
Multithreading issues
difficulties with self teaching myself rust
using options to optimize memory management
being more conservative/attentitive with data types
traits
Optimization
update_tiles function
crater generation algorithm


crates/libraries used so far:
eframe
env_logger
rand::Rng
OnceLock

Applied Courses
    Object Oriented Design
    Principles of Programming Languages
    Directed Study - Object Oriented Lang Op Semantics
    Directed Study - Adv Obj/Orient Component Constr
    Data Structures
    Operating Systems
    
Things I wish I'd done
multithreading
better memory mamnagement
review project structure
using options to optimize memory management earlier
being more conservative/attentitive with data types sooner
Utilization of traits